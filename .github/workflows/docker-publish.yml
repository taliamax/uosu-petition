name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

env:
  IMAGE_NAME_BACKEND: upetition-backend
  IMAGE_NAME_FRONTEND: upetition-frontend

jobs:
  build_and_push_frontend:
    name: "Build and push frontend Docker container"
    runs-on: ubuntu-latest

    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Build frontend image
        run: docker build . --file docker/frontend.prod.dockerfile --tag $IMAGE_NAME_FRONTEND

      - name: Push frontend image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME_FRONTEND

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME_FRONTEND $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  build_and_push_backend:
    name: "Build and push backend Docker container"
    runs-on: ubuntu-latest

    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Build backend image
        run: docker build . --file docker/backend.dockerfile --tag $IMAGE_NAME_BACKEND

      - name: Push backend image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME_BACKEND

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME_BACKEND $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  deploy_application:
    runs-on: ubuntu-latest
    needs: [build_and_push_backend, build_and_push_frontend]
    steps:
      - name: Set up gcloud
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          service_account_key: ${{ secrets.GCE_SA_KEY }}
          project_id: ${{ secrets.GCE_PROJECT }}

      - name: Trigger deploy process
        run: |
          gcloud -q compute ssh ${{ secrets.GCE_USER }}@${{ secrets.GCE_INSTANCE }} --zone ${{ secrets.GCE_ZONE }} --command=./run-deploy.sh

      - name: Clean up keys
        run: rm ~/.ssh/*
